// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class CreatedToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save CreatedToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save CreatedToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("CreatedToken", id.toString(), this);
  }

  static load(id: string): CreatedToken | null {
    return store.get("CreatedToken", id) as CreatedToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt | null {
    let value = this.get("count");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set count(value: BigInt | null) {
    if (value === null) {
      this.unset("count");
    } else {
      this.set("count", Value.fromBigInt(value as BigInt));
    }
  }

  get creator(): string {
    let value = this.get("creator");
    return value.toString();
  }

  set creator(value: string) {
    this.set("creator", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get contractAddress(): Bytes {
    let value = this.get("contractAddress");
    return value.toBytes();
  }

  set contractAddress(value: Bytes) {
    this.set("contractAddress", Value.fromBytes(value));
  }

  get synthetics(): Array<string> {
    let value = this.get("synthetics");
    return value.toStringArray();
  }

  set synthetics(value: Array<string>) {
    this.set("synthetics", Value.fromStringArray(value));
  }
}

export class Synthetic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Synthetic entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Synthetic entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Synthetic", id.toString(), this);
  }

  static load(id: string): Synthetic | null {
    return store.get("Synthetic", id) as Synthetic | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): Array<string | null> {
    let value = this.get("count");
    return value.toStringArray();
  }

  set count(value: Array<string | null>) {
    this.set("count", Value.fromStringArray(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    return value.toString();
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get newNav(): BigInt {
    let value = this.get("newNav");
    return value.toBigInt();
  }

  set newNav(value: BigInt) {
    this.set("newNav", Value.fromBigInt(value));
  }

  get newTokenPrice(): BigInt {
    let value = this.get("newTokenPrice");
    return value.toBigInt();
  }

  set newTokenPrice(value: BigInt) {
    this.set("newTokenPrice", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get totalSupply(): BigDecimal {
    let value = this.get("totalSupply");
    return value.toBigDecimal();
  }

  set totalSupply(value: BigDecimal) {
    this.set("totalSupply", Value.fromBigDecimal(value));
  }
}
